{"version":3,"sources":["services/app.service.js","services/app.service.ts"],"names":["System","register","exports_1","context_1","core_1","http_1","Observable_1","AppService","__decorate","id","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","setters","core_1_1","http_1_1","Observable_1_1","execute","http","loungeBaseUrl","placeBaseUrl","prototype","getLatestDiscussion","num","url","get","map","response","json","handleError","getDiscussion","Error","getLatestEntries","getMostViewed","getPlace","error","console","Observable","Injectable","Http"],"mappings":"AAAAA,OAAOC,UAAU,gBAAiB,gBAAiB,mBAAoB,SAASC,EAAWC,GACvF,YACA,IAUIC,GAAQC,EAAQC,EAChBC,EAVAC,GADeL,GAAaA,EAAUM,GACxBC,MAAQA,KAAKF,YAAe,SAAUG,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,gBAAZQ,UAAoD,kBAArBA,SAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIU,GAAIb,EAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,EAAWa,MAAIL,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOK,eAAeb,EAAQC,EAAKM,GAAIA,IAE5DO,EAAchB,MAAQA,KAAKgB,YAAe,SAAUC,EAAGC,GACvD,GAAuB,gBAAZN,UAAoD,kBAArBA,SAAQO,SAAyB,MAAOP,SAAQO,SAASF,EAAGC,GAI1G,QACIE,SACI,SAAUC,GACN3B,EAAS2B,GAEb,SAAUC,GACN3B,EAAS2B,GAEb,SAAUC,GACN3B,EAAe2B,IAEvBC,QAAS,WCnBjB3B,EAAA,WACI,QAAAA,GAAoB4B,GAAAzB,KAAAyB,KAAAA,EAEZzB,KAAA0B,cAAgB,cAChB1B,KAAA2B,aAAe,aA8C3B,MA5CI9B,GAAA+B,UAAAC,oBAAA,SAAoBC,GAChB,GAAIC,GAAM/B,KAAK0B,cAAgB,sBAE/B,OADW,OAAPI,IAAaC,GAAOD,GACjB9B,KAAKyB,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,MAAAA,GAASC,SADvBnC,SAEIA,KAAKoC,cAGpBvC,EAAA+B,UAAAS,cAAA,SAActC,GACV,GAAU,MAANA,EAAY,KAAM,IAAIuC,OAAM,kBAChC,IAAIP,GAAM/B,KAAK0B,cAAgB3B,CAC/B,OAAOC,MAAKyB,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,MAAQA,GAASC,SAD/BnC,SAEIA,KAAKoC,cAGpBvC,EAAA+B,UAAAW,iBAAA,SAAiBT,GACb,GAAIC,GAAM/B,KAAK2B,aAAe,mBAE9B,OADW,OAAPG,IAAaC,GAAOD,GACjB9B,KAAKyB,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,MAAAA,GAASC,SADvBnC,SAEIA,KAAKoC,cAGpBvC,EAAA+B,UAAAY,cAAA,SAAcV,GACV,GAAIC,GAAM/B,KAAK2B,aAAe,gBAE9B,OADW,OAAPG,IAAaC,GAAOD,GACjB9B,KAAKyB,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,MAAAA,GAASC,SADvBnC,SAEIA,KAAKoC,cAGpBvC,EAAA+B,UAAAa,SAAA,SAAS1C,GACL,GAAU,MAANA,EAAY,KAAM,IAAIuC,OAAM,kBAChC,IAAIP,GAAM/B,KAAK2B,aAAe5B,CAC9B,OAAOC,MAAKyB,KAAKO,IAAID,GAChBE,IAAI,SAAAC,GAAY,MAAQA,GAASC,SAD/BnC,SAEIA,KAAKoC,cAGZvC,EAAA+B,UAAAQ,YAAR,SAAoBM,GAEhB,MADAC,SAAQD,MAAMA,GACP9C,EAAAgD,WAAAhD,SAAiB8C,EAAMP,OAAOO,OAAS,iBAjDtD7C,EAAAC,GAACJ,EAAAmD,aDyEmB7B,EAAW,qBAAsBrB,EAAOmD,QACzCjD,MCzEnBL,EAAA,aAAAK","file":"services/app.service.js","sourcesContent":["System.register([\"@angular/core\", \"@angular/http\", \"rxjs/Observable\"], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    };\n    var __metadata = (this && this.__metadata) || function (k, v) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n    };\n    var core_1, http_1, Observable_1;\n    var AppService;\n    return {\n        setters:[\n            function (core_1_1) {\n                core_1 = core_1_1;\n            },\n            function (http_1_1) {\n                http_1 = http_1_1;\n            },\n            function (Observable_1_1) {\n                Observable_1 = Observable_1_1;\n            }],\n        execute: function() {\n            AppService = (function () {\n                function AppService(http) {\n                    this.http = http;\n                    this.loungeBaseUrl = 'api/lounge/'; // URL to web api\n                    this.placeBaseUrl = 'api/place/'; // URL to web api\n                }\n                AppService.prototype.getLatestDiscussion = function (num) {\n                    var url = this.loungeBaseUrl + \"GetLatestDiscussion/\";\n                    if (num != null)\n                        url += num;\n                    return this.http.get(url)\n                        .map(function (response) { return response.json(); })\n                        .catch(this.handleError);\n                };\n                AppService.prototype.getDiscussion = function (id) {\n                    if (id == null)\n                        throw new Error(\"id is required.\");\n                    var url = this.loungeBaseUrl + id;\n                    return this.http.get(url)\n                        .map(function (response) { return response.json(); })\n                        .catch(this.handleError);\n                };\n                AppService.prototype.getLatestEntries = function (num) {\n                    var url = this.placeBaseUrl + \"GetLatestEntries/\";\n                    if (num != null)\n                        url += num;\n                    return this.http.get(url)\n                        .map(function (response) { return response.json(); })\n                        .catch(this.handleError);\n                };\n                AppService.prototype.getMostViewed = function (num) {\n                    var url = this.placeBaseUrl + \"GetMostViewed/\";\n                    if (num != null)\n                        url += num;\n                    return this.http.get(url)\n                        .map(function (response) { return response.json(); })\n                        .catch(this.handleError);\n                };\n                AppService.prototype.getPlace = function (id) {\n                    if (id == null)\n                        throw new Error(\"id is required.\");\n                    var url = this.placeBaseUrl + id;\n                    return this.http.get(url)\n                        .map(function (response) { return response.json(); })\n                        .catch(this.handleError);\n                };\n                AppService.prototype.handleError = function (error) {\n                    console.error(error);\n                    return Observable_1.Observable.throw(error.json().error || \"Server error\");\n                };\n                AppService = __decorate([\n                    core_1.Injectable(), \n                    __metadata('design:paramtypes', [http_1.Http])\n                ], AppService);\n                return AppService;\n            }());\n            exports_1(\"AppService\", AppService);\n        }\n    }\n});\n","import {Injectable} from \"@angular/core\";\r\nimport {Http, Response} from \"@angular/http\";\r\nimport {Lounge} from \"../viewmodels/lounge\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n    constructor(private http: Http) { }\r\n\r\n    private loungeBaseUrl = 'api/lounge/';  // URL to web api\r\n    private placeBaseUrl = 'api/place/';  // URL to web api\r\n\r\n    getLatestDiscussion(num?: number) {\r\n        var url = this.loungeBaseUrl + \"GetLatestDiscussion/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getDiscussion(id: number) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.loungeBaseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => <Lounge>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getLatestEntries(num?: number) {\r\n        var url = this.placeBaseUrl + \"GetLatestEntries/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number) {\r\n        var url = this.placeBaseUrl + \"GetMostViewed/\";\r\n        if (num != null) url += num;\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getPlace(id: number) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.placeBaseUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => <Lounge>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}